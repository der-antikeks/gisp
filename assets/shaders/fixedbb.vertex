#version 330 core

// Input vertex data, different for all executions of this shader.
in vec3 vertexPosition;
in vec3 vertexNormal;
in vec2 vertexUV;

// Values that stay constant for the whole mesh.
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;
uniform mat3 normalMatrix;

uniform vec2 size;

// Output data, will be interpolated for each fragment
out vec2 UV;

void main() {
	vec3 vertexPosition_billboard = (modelMatrix * vec4(0, 0, 0, 1)).xyz;
	gl_Position = projectionMatrix * viewMatrix * vec4(vertexPosition_billboard, 1.0f);
	gl_Position /= gl_Position.w;
	gl_Position.xy += vertexPosition.xy * size;

	UV = vertexUV;
}
