#version 330 core

// Input vertex data, different for all executions of this shader.
in vec3 vertexPosition;
in vec3 vertexNormal;
in vec2 vertexUV;

// Values that stay constant for the whole mesh.
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;
uniform mat3 normalMatrix;

// Output data, will be interpolated for each fragment
out vec2 UV;

void main() {
	vec3 cameraRight = vec3(viewMatrix[0][0], viewMatrix[1][0], viewMatrix[2][0]);
	vec3 cameraUp = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);
	vec3 center = (modelMatrix * vec4(0, 0, 0, 1)).xyz;

	vec3 vertexPosition_billboard = 
		center
		+ cameraRight * vertexPosition.x
		+ cameraUp * vertexPosition.y;

	gl_Position = projectionMatrix * viewMatrix * vec4(vertexPosition_billboard, 1.0);
	UV = vertexUV;
}
